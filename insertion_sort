import random
import time
import sys

# Increase the recursion depth limit (adjust as needed)
sys.setrecursionlimit(10**6)  # Set to a higher value than the default

# Define the Insertion Sort algorithm
def insertion_sort(arr):
    # Iterate through the array starting from the second element
    for i in range(1, len(arr)):
        # Store the current element to be inserted
        key = arr[i]
        # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# Function to find the kth smallest element using Insertion Sort
def kth_smallest_insertion_sort(arr, k):
    # Sort the array using Insertion Sort
    start_time = time.time()  # Start time measurement
    sorted_arr = insertion_sort(arr)
    end_time = time.time()  # End time measurement
    elapsed_time = end_time - start_time  # Calculate elapsed time
    # Return the kth smallest element and the elapsed time
    return sorted_arr[k-1], elapsed_time

# Generate a random array of 10 input values ranging from 0 to 100
input_values = [random.randint(0, 100) for _ in range(10)]
print("Input Array:", input_values)
k = 1  # Example value of k
result, time_taken = kth_smallest_insertion_sort(input_values, k)
print(f"{k}th Smallest Element:", result)
print("Time Taken:", time_taken, "seconds")
